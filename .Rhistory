dat
unzip("activity.zip") # Unzip archive
dat <- read.csv("activity.csv") # Read in data file
head dat
head(dat)
mean(dat$interval)
max(totalStepsPerInterval)
isNA("NA")
is.NA
head(dat)
par(mfrow=c(1,2))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
# Loading and preprocessing the data
Show any code that is needed to
## 1. Load the data (i.e. `read.csv()`)
```{r}
unzip("activity.zip") # Unzip archive
dat <- read.csv("activity.csv") # Read in data file
head(dat)
```
## 2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r}
dates <- strptime(dat$date, "%Y-%m-%d")
dat$date <- dates
head(dat)
```
### Keep a list of all possible days & intervals. These will help plot and data processing.
```{r}
uniqueDates <- unique(dates)
uniqueIntervals <- unique(dat$interval)
```
# What is mean total number of steps taken per day?
(For this part, missing values can be ignored.)
## 1. Make a histogram of the total number of steps taken each day
```{r}
### First split up the data frame for steps by day
stepsSplit <- split(dat$steps, dates$yday)
### Next find the total number of steps over each day
totalStepsPerDay <- sapply(stepsSplit, sum, na.rm=TRUE)
### Plot the histogram where the x-axis denotes the day
### and the y-axis denotes the total number of steps taken
hist(totalStepsPerDay, breaks=25, main="Histogram of steps taken each day",
xlab="Number of steps a day", ylab="Frequency (number of days)",  lwd=5, col="blue")
```
## 2. Calculate and report the **mean** and **median** total number of steps taken per day
### Mean
```{r}
meanStepsPerDay <- mean(totalStepsPerDay)
meanStepsPerDay
```
### Median
```{r}
medianStepsPerDay <- median(totalStepsPerDay)
medianStepsPerDay
```
# What is the average daily activity pattern?
## 1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken,averaged across all days (y-axis)
```{r}
intervalSplit <- split(dat$steps, dat$interval)
totalStepsPerInterval <- sapply(intervalSplit, mean, na.rm=TRUE)
head(totalStepsPerInterval)
plot(totalStepsPerInterval,type = "h",xlab="interval")
```
## 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
maxinterval=totalStepsPerInterval[1]
for (i in seq_along(totalStepsPerInterval)){
if(totalStepsPerInterval[i]>maxinterval){
maxinterval=totalStepsPerInterval[i]
}
}
maxinterval
max(totalStepsPerInterval)
```
# Imputing missing values
Missing values are coded as `NA`. The presence of missing days may introduce bias into some calculations of the data.
## 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
```{r}
numNA=sum(is.na(dat$steps))
numNA
```
## 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
I will try the mean for that 5-minute interval. If the interval has also NA, then put zero.
## 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
for (i in seq_along(dat$steps)){
if(is.na(dat$steps[i])){
dat$steps[i]=totalStepsPerInterval[as.numeric(dat$interval[i])/5+1]
}
if(is.na(dat$steps[i])){
dat$steps[i]=0
}
}
numNA2=sum(is.na(dat$steps))
numNA2
```
## 4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
### First split up the data frame for steps by day
stepsSplit <- split(dat$steps, dates$yday)
### Next find the total number of steps over each day
totalStepsPerDay <- sapply(stepsSplit, sum, na.rm=TRUE)
### Plot the histogram where the x-axis denotes the day
### and the y-axis denotes the total number of steps taken
hist(totalStepsPerDay, breaks=25, main="Histogram of steps taken each day",
xlab="Number of steps a day", ylab="Frequency (number of days)",  lwd=5, col="blue")
```
### Mean with NA's
```{r}
meanStepsPerDay
```
### Mean without NA's
```{r}
meanStepsPerDay <- mean(totalStepsPerDay)
meanStepsPerDay
```
### Median with NA's
```{r}
medianStepsPerDay
```
### Median without NA's
```{r}
medianStepsPerDay <- median(totalStepsPerDay)
medianStepsPerDay
```
### Imputting missing data narrows the diference between the mean and the median
# Are there differences in activity patterns between weekdays and weekends?
## For this part the `weekdays()` function may be of some help. Use the dataset with the filled-in missing values for this part.
## 1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
## 2. Make a panel plot containing a time series plot (i.e. type = 1) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
par(mfrow=c(1,2))
```{r}
dat$weekday=weekdays(dat$date)
head(dat)
```
dat$weekday<- as.factor(ifelse(weekdays(dat$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
head(dat)
intervalSplit <- split(dat$steps, dat$interval,dat$weekday)
totalStepsPerInterval <- sapply(intervalSplit, mean, na.rm=TRUE)
head(totalStepsPerInterval)
par(mfrow=c(1,2))
plot(totalStepsPerInterval,type = "h",xlab="weekday interval")
plot(totalStepsPerInterval,type = "h",xlab="weekend interval")
head(totalStepsPerInterval)
head(totalStepsPerInterval[1])
intervalSplit <- split(dat$steps, dat$interval,dat$weekday=weekday)
totalStepsPerInterval <- sapply(intervalSplit, mean, na.rm=TRUE)
head(totalStepsPerInterval)
par(mfrow=c(1,2))
plot(totalStepsPerInterval,type = "h",xlab="weekday interval")
plot(totalStepsPerInterval,type = "h",xlab="weekend interval")
intervalSplit <- split(dat$steps, dat$interval,dat$weekday==weekday)
totalStepsPerInterval <- sapply(intervalSplit, mean, na.rm=TRUE)
head(totalStepsPerInterval)
intervalSplit1 <- split(dat$steps, dat$interval,dat$weekday==weekday)
totalStepsPerInterval1 <- sapply(intervalSplit1, mean, na.rm=TRUE)
head(totalStepsPerInterval1)
intervalSplit2 <- split(dat$steps, dat$interval,dat$weekday==weekend)
totalStepsPerInterval2 <- sapply(intervalSplit2, mean, na.rm=TRUE)
head(totalStepsPerInterval2)
par(mfrow=c(1,2))
plot(totalStepsPerInterval1,type = "h",xlab="weekday interval")
plot(totalStepsPerInterval2,type = "h",xlab="weekend interval")
dat1<-dat[dat$weekday=weekday,]
head(dat1)
dat1<-dat[dat$weekday==weekday,]
head(dat1)
dat1<-dat[dat$weekday=="weekday",]
head(dat1)
dat1<-dat[dat$weekday==1,]
head(dat1)
dat1<-dat[dat$weekday=='weekday',]
head(dat1)
head(dat)
dat1<-dat[dat$weekday=='Weekday',]
head(dat)
dat2<-dat[dat$weekday=='Weekend',]
head(dat2)
dat1<-dat[dat$weekday=='Weekday',]
dat2<-dat[dat$weekday=='Weekend',]
head(dat2)
intervalSplit1 <- split(dat1$steps, dat1$interval)
totalStepsPerInterval1 <- sapply(intervalSplit1, mean, na.rm=TRUE)
head(totalStepsPerInterval1)
intervalSplit2 <- split(dat2$steps, dat2$interval)
totalStepsPerInterval2 <- sapply(intervalSplit2, mean, na.rm=TRUE)
head(totalStepsPerInterval2)
par(mfrow=c(1,2))
plot(totalStepsPerInterval1,type = "h",xlab="weekday interval")
plot(totalStepsPerInterval2,type = "h",xlab="weekend interval")
